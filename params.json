{
  "name": "Bun",
  "tagline": "Bun is a simple to use C++ Object Relational Mapper (ORM) library",
  "body": "# bun\r\nBun is a simple to use C++ Object Relational Mapper (ORM) library\r\n\r\n\r\n#Using the Library\r\n\r\n```cpp\r\n#include \"blib/bun/SqliteDb.hpp\"\r\nnamespace test {\r\n  struct Person {\r\n    std::string name;\r\n    int age;\r\n    float height;\r\n  };\r\n}\r\n\r\nGENERATE_BINDING( (test::Person, name, age, height) );\r\n\r\nint main() {\r\n  namespace bun = blib::bun;\r\n  // Connect the db. If the db is not there it will be created.\r\n  // It should include the whole path\r\n  bun::dbConnect( \"test.db\" );\r\n  // Create the schema. We can create the schema multile times. If its already created\r\n  // it will be safely ignored\r\n  blib::bun::createSchema<test::Person>();\r\n\r\n  // Creat some entries in the database\r\n  for (int i = 1; i < 10; ++i) {\r\n    // PRef is a reference to the persistant object.\r\n    // PRef keeps the ownership of the memory. Release the memory when it is destroyed.\r\n    // Internally it holds the object in a unique_ptr\r\n    // PRef also has a oid associated with the object\r\n    bun::PRef<test::Person> p = new test::Person;\r\n    // Assign the members values\r\n    p->age = i+10;\r\n    p->height = 5.6;\r\n    p->name = fmt::format(\"Brainless_{}\", i);\r\n    // Persist the object and get a oid for the persisted object.\r\n    const blib::bun::SimpleOID oid = p.persist();\r\n\r\n    //Getting the object from db using oid.\r\n    bun::PRef<test::Person> p1(oid);\r\n  }\r\n\r\n  // To get all the object oids of a particular object.\r\n  // oids is a vector of tyoe std::vector<blib::bun<>SimpleOID<test::Person>>\r\n  const auto person_oids = blib::bun::getAllOids<test::Person>();\r\n\r\n  // To get the objects of a particular type\r\n  // std::vector<blib::bun::Pref<test::Person>>\r\n  const auto person_objs = blib::bun::getAllObjects<test::Person>();\r\n\r\n  return 0;\r\n}\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}