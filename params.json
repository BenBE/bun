{
  "name": "Bun",
  "tagline": "Bun is a simple to use C++ Object Relational Mapper (ORM) library",
  "body": "# bun\r\nBun is a simple to use C++ Object Relational Mapper (ORM) library\r\n\r\n\r\n#Usage\r\n\r\n```C++\r\n// Bun.cpp : Defines the entry point for the console application.\r\n//\r\n\r\n#include \"blib/bun/SqliteDb.hpp\"\r\n\r\nnamespace test {\r\n  struct Test {\r\n    int one;\r\n    float two;\r\n    std::string three;\r\n  };\r\n\r\n  struct SomeOtherTest {\r\n    int one;\r\n    float two;\r\n    std::string three;\r\n    SomeOtherTest() = default;\r\n  };\r\n}\r\n\r\nGENERATE_BINDING( (test::Test, one, two) );\r\nGENERATE_BINDING( (test::SomeOtherTest, one, two, three) );\r\n\r\nint main() {\r\n  namespace bun = blib::bun;\r\n  bun::dbConnect( \"test.db\" );\r\n  blib::bun::createSchema<test::Test>();\r\n  blib::bun::createSchema<test::SomeOtherTest>();\r\n\r\n  for (int i = 1; i < 100; ++i) {\r\n    bun::PRef<test::SomeOtherTest> t = new test::SomeOtherTest;\r\n    t->one = i;\r\n    t->two = i * i / i + 1;\r\n    t->three = std::to_string( t->two );\r\n    t.persist();\r\n  }\r\n\r\n  for (int i = 0; i < 10; ++i) {\r\n    bun::PRef<test::Test> t = new test::Test;\r\n    t->one = 11;\r\n    t->two = 666;\r\n    t.persist();\r\n  }\r\n\r\n  blib::bun::SimpleOID oid;\r\n  oid.high = 10;\r\n  oid.low = 1547777240864505;\r\n  bun::PRef<test::Test> t1( oid );\r\n  t1->one = 12;\r\n  t1->two = 667;\r\n  t1.persist();\r\n\r\n  auto vec_list = blib::bun::getAllOids<test::Test>();\r\n  auto objs = blib::bun::getAllObjects<test::Test>();\r\n\r\n  auto vec_list1 = blib::bun::getAllOids<test::SomeOtherTest>();\r\n  auto objs1 = blib::bun::getAllObjects<test::SomeOtherTest>();\r\n\r\n  return 0;\r\n}\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}